// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: api/protos/beacon/api.proto

package beacon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeaconClient is the client API for Beacon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeaconClient interface {
	Signal(ctx context.Context, in *SignalReqeust, opts ...grpc.CallOption) (*SignalResponse, error)
}

type beaconClient struct {
	cc grpc.ClientConnInterface
}

func NewBeaconClient(cc grpc.ClientConnInterface) BeaconClient {
	return &beaconClient{cc}
}

func (c *beaconClient) Signal(ctx context.Context, in *SignalReqeust, opts ...grpc.CallOption) (*SignalResponse, error) {
	out := new(SignalResponse)
	err := c.cc.Invoke(ctx, "/grpcbeacon.Beacon/Signal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeaconServer is the server API for Beacon service.
// All implementations must embed UnimplementedBeaconServer
// for forward compatibility
type BeaconServer interface {
	Signal(context.Context, *SignalReqeust) (*SignalResponse, error)
	mustEmbedUnimplementedBeaconServer()
}

// UnimplementedBeaconServer must be embedded to have forward compatible implementations.
type UnimplementedBeaconServer struct {
}

func (UnimplementedBeaconServer) Signal(context.Context, *SignalReqeust) (*SignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (UnimplementedBeaconServer) mustEmbedUnimplementedBeaconServer() {}

// UnsafeBeaconServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeaconServer will
// result in compilation errors.
type UnsafeBeaconServer interface {
	mustEmbedUnimplementedBeaconServer()
}

func RegisterBeaconServer(s grpc.ServiceRegistrar, srv BeaconServer) {
	s.RegisterService(&Beacon_ServiceDesc, srv)
}

func _Beacon_Signal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconServer).Signal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbeacon.Beacon/Signal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconServer).Signal(ctx, req.(*SignalReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

// Beacon_ServiceDesc is the grpc.ServiceDesc for Beacon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Beacon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcbeacon.Beacon",
	HandlerType: (*BeaconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signal",
			Handler:    _Beacon_Signal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/beacon/api.proto",
}
